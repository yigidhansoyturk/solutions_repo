{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Projectile Motion: Range vs Angle body { font-family: Arial, sans-serif; margin: 40px auto; max-width: 900px; background-color: #fefefe; color: #333; line-height: 1.6; } h1, h2, h3 { color: #2c3e50; } pre { background-color: #f0f0f0; padding: 10px; overflow-x: auto; } code { font-family: Consolas, monospace; color: #2d3436; } #plot { margin-top: 20px; } label { font-weight: bold; } Investigating the Range as a Function of the Angle of Projection \ud83d\udcd8 Theoretical Foundation In ideal projectile motion, an object launched at angle \u03b8 with speed v\u2080 follows a parabolic path. The horizontal range R is derived from Newton\u2019s laws as: R = (v\u2080\u00b2 * sin(2\u03b8)) / g This equation emerges by solving the motion components: vx = v\u2080 * cos(\u03b8) vy = v\u2080 * sin(\u03b8) Time of flight: T = 2 * v\u2080 * sin(\u03b8) / g Range: R = vx * T This results in a family of parabolas based on initial velocity and angle. All trajectories share a common shape but scale differently with v\u2080 and \u03b8 . \ud83e\uddea Simulation: Range vs Angle Adjust Initial Velocity (m/s): 30 m/s \ud83d\udcc8 Graphical Representations The graph above shows how the range changes with projection angle. Maximum range is achieved at 45\u00b0 when launched from flat ground. You can observe how higher initial velocities scale the range. \ud83e\udde0 Limitations and Real-World Factors This ideal model assumes: No air resistance Flat launch and landing heights No wind or drag Realistic modeling can include: Drag force (air resistance) Uneven terrain or launch height Wind vectors Spinning effects (like Magnus force) These can be simulated using numerical methods like Euler or Runge-Kutta solvers. \ud83d\udcdc Python Code (for reference or notebook submission) You can copy this into a Python file or Jupyter Notebook. import numpy as np import matplotlib.pyplot as plt def compute_range(v0, g, angle_deg): angle_rad = np.radians(angle_deg) return (v0**2 * np.sin(2 * angle_rad)) / g v0 = 30.0 g = 9.81 angles = np.linspace(0, 90, 500) ranges = compute_range(v0, g, angles) plt.plot(angles, ranges) plt.title(\\\"Range vs Angle of Projection\\\") plt.xlabel(\\\"Angle (degrees)\\\") plt.ylabel(\\\"Range (meters)\\\") plt.grid(True) plt.show() function computeRange(v0, g, angleDeg) { const angleRad = angleDeg * Math.PI / 180; return (Math.pow(v0, 2) * Math.sin(2 * angleRad)) / g; } function updatePlot() { const g = 9.81; const v0 = parseFloat(document.getElementById('velocity').value); document.getElementById('velocityValue').textContent = v0; const angles = []; const ranges = []; for (let theta = 0; theta <= 90; theta += 0.5) { angles.push(theta); ranges.push(computeRange(v0, g, theta)); } const trace = { x: angles, y: ranges, type: 'scatter', mode: 'lines', line: { color: 'royalblue' }, name: `v\u2080 = ${v0} m/s` }; const layout = { title: 'Range vs Angle of Projection', xaxis: { title: 'Angle (degrees)' }, yaxis: { title: 'Range (meters)' } }; Plotly.newPlot('plot', [trace], layout); } updatePlot(); // initial render","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Forced Damped Pendulum body { font-family: Arial, sans-serif; margin: 40px auto; max-width: 900px; background-color: #fefefe; color: #333; line-height: 1.6; } h1, h2 { color: #2c3e50; } pre { background-color: #f0f0f0; padding: 10px; overflow-x: auto; } code { font-family: Consolas, monospace; } .slider { width: 100%; } Dynamics of a Forced Damped Pendulum Theoretical Foundation The equation of motion for a forced damped pendulum is: d\u00b2\u03b8/dt\u00b2 + b*d\u03b8/dt + \u03c9\u2080\u00b2*sin(\u03b8) = A*cos(\u03c9*t) Where: b : Damping coefficient \u03c9\u2080 : Natural frequency A : Driving force amplitude \u03c9 : Driving force frequency For small \u03b8, we can approximate sin(\u03b8) \u2248 \u03b8 and analyze resonance conditions where \u03c9 \u2248 \u03c9\u2080. Python Simulation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp def pendulum(t, y, b, omega0, A, omega): theta, omega_ = y dydt = [omega_, -b * omega_ - omega0**2 * np.sin(theta) + A * np.cos(omega * t)] return dydt b = 0.5 omega0 = 1.5 A = 1.2 omega = 2.0 sol = solve_ivp(pendulum, [0, 40], [0.1, 0], args=(b, omega0, A, omega), t_eval=np.linspace(0, 40, 1000)) plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show() Practical Applications This system models real-world systems such as: Energy harvesting devices Suspension bridges under wind load Driven RLC electrical circuits Model Limitations and Extensions Limitations: Linear damping assumption Pure sinusoidal forcing only No structural or nonlinear damping effects included Extensions: Nonlinear damping and random noise Custom driving forces and terrains Exploration of chaotic behavior through bifurcation and Poincar\u00e9 analysis Visual Dynamics Exploration Graphical tools such as phase portraits, bifurcation diagrams, and Poincar\u00e9 sections are valuable for analyzing transitions to chaos in the system.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"}]}